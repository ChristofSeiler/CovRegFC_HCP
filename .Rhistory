library(devtools)
library(rstan)
library(abind)
library(png)
library(cowplot)
library(BatchJobs)
library(coda)
# Chunk 3
subject_info = read.csv("HCP_PTN820/sample_info.csv")
subject_info = subject_info[,c(
"Subject",
"Age",
"Gender",
"Acquisition",
"PSQI_AmtSleep", # amount of sleep in hours
"PSQI_Score" # Pittsburgh Sleep Quality Index (PSQI) Completed
)]
# Chunk 4
sleep_duration = rep("undefined",nrow(subject_info))
sleep_duration[subject_info$PSQI_AmtSleep <= 6] = "short"
sleep_duration[(subject_info$PSQI_AmtSleep >= 7) & (subject_info$PSQI_AmtSleep <= 9)] = "conventional"
subject_info$sleep_duration = factor(sleep_duration)
table(subject_info$sleep_duration)
str(subject_info)
# Chunk 5
num_regions = as.integer(params$num_regions)
num_regions
channel_names = paste0("R",1:num_regions)
path = paste0("HCP_PTN820/node_timeseries/3T_HCP820_MSMAll_d",num_regions,"_ts2")
file_names = list.files(path = path,pattern = ".txt")
file_subject_ids = strsplit(file_names,split = ".txt") %>% unlist
ts = lapply(file_subject_ids,function(Subject) {
print(paste("reading subject:",Subject))
full_path = paste0(path,"/",Subject,".txt")
timeseries = read.csv(full_path,header = FALSE,sep = " ")
timeseries$Subject = Subject
timeseries
}) %>% do.call(rbind,.) %>% data.frame
names(ts)[1:num_regions] = channel_names
# Chunk 6
ts_subject_info = merge(ts,subject_info,by = "Subject")
# Chunk 7
subject_names = names(table(ts_subject_info$Subject))
timeseries = subset(ts_subject_info,Subject == subject_names[1])
timeseries$timepoint = rep(1:(nrow(timeseries)/4),4)
timeseries$run = lapply(paste0("run_",1:4),function(i) rep(i,nrow(timeseries)/4)) %>% unlist
timeseries_long = melt(timeseries,id.vars = c("timepoint","run",names(subject_info)))
ggplot(timeseries_long,aes(x = timepoint,y = value,color = variable)) +
geom_line() + facet_wrap(~run)
timeseries_long_subset = subset(timeseries_long,
timepoint < 51 & (variable == "R1" | variable == "R2" | variable == "R3"))
ggplot(timeseries_long_subset,aes(x = timepoint,y = value,color = variable)) +
geom_line() + facet_wrap(~run)
run = cut_number(1:nrow(timeseries), 4, labels=FALSE)
dim(run)
length(run)
subject_names
subject_names[[1]]
subject_name = subject_names[[1]]
sapply(1:4,function(i) {
timeseries = subset(ts_subject_info,Subject == subject_name)
Y = timeseries[run==i,channel_names]
effectiveSize(Y) %>% min
})
i = 1
timeseries = subset(ts_subject_info,Subject == subject_name)
Y = timeseries[run==i,channel_names]
dim(Y)
effectiveSize(Y)
effectiveSize(Y) %>% min
dim(df)
ess = lapply(subject_names,function(subject_name) {
sapply(1:4,function(i) {
timeseries = subset(ts_subject_info,Subject == subject_name)
Y = timeseries[run==i,channel_names]
effectiveSize(Y) %>% min
})  %>% min
}) %>% unlist
nrow(timeseries)
run = cut_number(1:nrow(timeseries), 4, labels=FALSE)
ess = lapply(subject_names,function(subject_name) {
sapply(1:4,function(i) {
timeseries = subset(ts_subject_info,Subject == subject_name)
Y = timeseries[run==i,channel_names]
effectiveSize(Y) %>% min
})  %>% min
}) %>% unlist
ess
df = data.frame(subject_id=1:length(ess),ess)
ggplot(df,aes(ess)) + geom_histogram()
tp_per_subject = round(min(df$ess))
tp_per_subject
mean(df$ess)
median(df$ess)
condition
load("power_results/fit_list_low_15_40_167.Rdata")
lenght(fit_list)
length(fit_list)
fit = fit_list[[1]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
path = paste0("HCP_PTN820/groupICA/groupICA_3T_HCP820_MSMAll_d",num_regions,".ica/melodic_IC_sum.sum")
pngs = list.files(path = path,pattern = ".png")
full_paths = paste(path,pngs,sep = "/")
full_paths
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
fit = fit_list[[2]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
channel_names
title
title = "test"
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
fit = fit_list[[1]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title)
CovRegFC::plot_diagnostics(fit,par_name = "sigma",num_par = 8)
CovRegFC::plot_diagnostics(fit,par_name = "B",num_par = 8)
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05,
title = title)
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.1,
title = title)
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.1,
title = title,)
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.1,
title = title,brain_slices = full_paths)
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.5,
title = title,brain_slices = full_paths)
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
CovRegFC::plot_coeff
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title)
response = channel_names
alpha = 0.05/length(channel_names)
title = title
title
beta = rstan::extract(fit,pars = "B")[[1]]
num_sim = dim(beta)[1]
col_number = 2
beta_2_perc = apply(beta[,,col_number],MARGIN = 2,function(vec)
quantile(vec,probs = c(alpha,
0.5,
1-alpha)))
df_combo = data.frame(x = factor(response, levels = response),
t(beta_2_perc))
names(df_combo) = c("channel_name","low","mid","high")
df_combo$confidence = abs(df_combo$mid)/abs(df_combo$high-df_combo$low)
detect_sign = function(a,b) {
if(sign(a) > 0 & sign(b) > 0) { return("positive") }
else if(sign(a) < 0 & sign(b) < 0) { return("negative") }
else { return("unclear") }
}
df_combo$sign = sapply(1:nrow(df_combo),function(i)
detect_sign(df_combo$low[i],df_combo$high[i])) %>%
factor(.,levels = c("positive","negative","unclear"))
df_combo$channel_name = factor(df_combo$channel_name,levels = df_combo$channel_name)
# FDR
beta_da_pos = lapply(1:num_sim,function(i) beta[i,,col_number] < 0) %>% Reduce('+', .)
beta_da_neg = lapply(1:num_sim,function(i) beta[i,,col_number] > 0) %>% Reduce('+', .)
# posterior expected FDR
# see Mitra, Mueller, and Ji (2016) for an application to connectivity
fdr_threshold = function(beta_da,FDR) {
ps = beta_da / num_sim
ps[ps==0] = 1/num_sim
seq_kappa = seq(0.5,1,1/num_sim/10)
seq_kappa = seq_kappa[-length(seq_kappa)]
df_kappa = sapply(seq_kappa,function(kappa) {
I = ifelse(test = ps>kappa,yes = 1,no = 0)
FDR_kappa = sum((1-ps)*I)/sum(I)
c(kappa=kappa,FDR_kappa=FDR_kappa)
}) %>% t %>% data.frame
kappa = df_kappa[which(df_kappa$FDR_kappa <= FDR)[1],"kappa"]
ps > kappa
}
# uncorrected
ids = c(beta_da_neg,beta_da_pos)/num_sim <= alpha
neg_ids = ids[1:length(beta_da_neg)] %>% which
pos_ids = ids[(length(beta_da_neg)+1):length(ids)] %>% which
neg_ids
pos_ids
p_coeff = ggplot(df_combo, aes(x=mid, y=channel_name)) +
geom_vline(xintercept = 0, col = "red") +
geom_point() +
geom_segment(mapping=aes(x=low, y=channel_name, xend=high, yend=channel_name)) +
labs(title = title) +
xlab("coefficient") +
theme(axis.title.y = element_blank())
p_coeff
ps = lapply(neg_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
ps
p_brains_neg = NULL
if(length(ps) > 0)
p_brains_neg = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 1")
p_brains_neg
ps = lapply(pos_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
ps
p_brains_pos = NULL
if(length(ps) > 0)
p_brains_pos = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 2")
p_brains_pos
is.null(p_brains_neg) && is.null(p_brains_pos)
is.null(p_brains_pos)
# combine
if(is.null(p_brains_neg) && is.null(p_brains_pos)) {
p_coeff
} else if(is.null(p_brains_neg)) {
plot_grid(p_coeff,
p_brains_pos,
ncol = 2,align = "h")
} else if(is.null(p_brains_pos)) {
plot_grid(p_brains_neg,
p_coeff,
ncol = 2,align = "h")
} else {
plot_grid(p_brains_neg,
p_coeff,
p_brains_pos,
ncol = 3,align = "h")
}
neg_ids
neg_ids = c(1,2)
pos_ids
# brain
ps = lapply(neg_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_neg = NULL
if(length(ps) > 0)
p_brains_neg = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 1")
ps = lapply(pos_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_pos = NULL
if(length(ps) > 0)
p_brains_pos = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 2")
brain_slices
brain_slices = full_paths
# brain
ps = lapply(neg_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_neg = NULL
if(length(ps) > 0)
p_brains_neg = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 1")
ps = lapply(pos_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_pos = NULL
if(length(ps) > 0)
p_brains_pos = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 2")
# combine
if(is.null(p_brains_neg) && is.null(p_brains_pos)) {
p_coeff
} else if(is.null(p_brains_neg)) {
plot_grid(p_coeff,
p_brains_pos,
ncol = 2,align = "h")
} else if(is.null(p_brains_pos)) {
plot_grid(p_brains_neg,
p_coeff,
ncol = 2,align = "h")
} else {
plot_grid(p_brains_neg,
p_coeff,
p_brains_pos,
ncol = 3,align = "h")
}
neg_ids
pos_ids
neg_ids = pos_ids
neg_ids
pos_ids
pos_ids = c(10,11)
# brain
ps = lapply(neg_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_neg = NULL
if(length(ps) > 0)
p_brains_neg = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 1")
ps = lapply(pos_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_pos = NULL
if(length(ps) > 0)
p_brains_pos = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 2")
# combine
if(is.null(p_brains_neg) && is.null(p_brains_pos)) {
p_coeff
} else if(is.null(p_brains_neg)) {
plot_grid(p_coeff,
p_brains_pos,
ncol = 2,align = "h")
} else if(is.null(p_brains_pos)) {
plot_grid(p_brains_neg,
p_coeff,
ncol = 2,align = "h")
} else {
plot_grid(p_brains_neg,
p_coeff,
p_brains_pos,
ncol = 3,align = "h")
}
neg_ids = c(1,2)
# brain
ps = lapply(neg_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_neg = NULL
if(length(ps) > 0)
p_brains_neg = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 1")
ps = lapply(pos_ids,function(i) plot_brain(brain_slices[i],title = paste0("R",i)) )
p_brains_pos = NULL
if(length(ps) > 0)
p_brains_pos = do.call(plot_grid,c(ps,ncol = 4,nrow = 3)) + ggtitle("Parcel Set 2")
# combine
if(is.null(p_brains_neg) && is.null(p_brains_pos)) {
p_coeff
} else if(is.null(p_brains_neg)) {
plot_grid(p_coeff,
p_brains_pos,
ncol = 2,align = "h")
} else if(is.null(p_brains_pos)) {
plot_grid(p_brains_neg,
p_coeff,
ncol = 2,align = "h")
} else {
plot_grid(p_brains_neg,
p_coeff,
p_brains_pos,
ncol = 3,align = "h")
}
neg_ids
pos_ids
detach("package:CovRegFC", unload=TRUE)
library("CovRegFC", lib.loc="~/Code/RLibraries")
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
fit = fit_list[[2]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
fit = fit_list[[3]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
fit = fit_list[[4]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
fit = fit_list[[5]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
load("power_results/fit_list_low_15_80_167.Rdata")
fit = fit_list[[1]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
load("power_results/fit_list_low_15_NA_167.Rdata")
fit = fit_list[[1]]
title
condition_names
title = "short vs. conventional"
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
ggsave(p_brain_coeff,filename = paste0("brains_coeff_",num_regions,"_",num_subjects,"_",tp_per_subject,".pdf"),
height = 5,width = 10)
num_subjects = NA
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
ggsave(p_brain_coeff,filename = paste0("brains_coeff_",num_regions,"_",num_subjects,"_",tp_per_subject,".pdf"),
height = 5,width = 10)
tp_per_subject
tp_per_subject = 167
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
ggsave(p_brain_coeff,filename = paste0("brains_coeff_",num_regions,"_",num_subjects,"_",tp_per_subject,".pdf"),
height = 5,width = 10)
num_regions
num_subjects
tp_per_subject
channel_names
title
load("power_results/fit_list_low_15_80_167.Rdata")
fit = fit_list[[1]]
p_brain_coeff = CovRegFC::plot_coeff(fit,
response = channel_names,
alpha = 0.05/length(channel_names),
title = title,
brain_slices = full_paths)
p_brain_coeff
setwd("~/CovRegFC_HCP")
dir.exists
dir.exists("test")
dir.exists("test2")
if(dir.exists("test")) unlink("test",recursive = TRUE)
